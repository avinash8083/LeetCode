//https://leetcode.com/problems/target-sum/
//https://www.youtube.com/watch?v=Hw6Ygp3JBYw

//dfs and knapsack solution 

class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        return dfs(nums, 0, S);
    }
    private int dfs(int[] nums, int i, int S) {
        if (i == nums.length) {
            if (S == 0) 
                return 1;
            return 0;
        }
        return dfs(nums, i+1, S-nums[i]) + dfs(nums, i+1, S+nums[i]);
    }
}

//............................................................................................................................


class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum=0;
      for(int i=0;i<nums.length;i++)
        sum+=nums[i];
      
           if(S>sum)
            return 0;
      if((sum-S)%2!=0)
            return 0;
      
      int diff=(sum+S)/2;
      int a[][]=new int[nums.length+1][diff+1];
      
        a[0][0] = 1;
 
        for(int i=1;i<=nums.length;i++){
          for(int j=0;j<=diff;j++){
            if(nums[i-1]<=j){
              a[i][j]=a[i-1][j]+a[i-1][j-nums[i-1]];
            }
            else{
               a[i][j]=a[i-1][j];
            }
          }
        }
        return a[nums.length][diff];
    }
}
