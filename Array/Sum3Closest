//https://leetcode.com/problems/3sum-closest/

//...............................not good approch..........................................................................

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int sum=nums[0] + nums[1] + nums[2];
        for(int i=0;i<nums.length-2;i++){
            
           if(i>0 && nums[i]==nums[i-1])
               continue;
            
        int low=i+1,high=nums.length-1;
                        
        while(low<high){
                    int new1=nums[i]+nums[low]+nums[high]; 
                   if(sum==target)return sum;
                   if(Math.abs(sum-target)>Math.abs(new1-target)){
                    sum=new1;
               // while (low < high && nums[low] == nums[low+1]) low++; //remove duplicate
                while (low < high && nums[high] == nums[high-1]) high--;  //remove duplicate 
                  }
                   if(new1<target)
                     low++;
                   else
                     high--;
                 }
        }
        return sum;
    }
}
//.............................................same approch with clean code.......................................................

class Solution {
   public int threeSumClosest(int[] nums, int target) {
        int n = nums.length;
        Arrays.sort(nums);
        int res = nums[0] + nums[1] + nums[2];
        for (int i = 0; i < n; i++) {
            int l = i + 1, r = n - 1;
            while (l < r) {
                int sum = nums[l] + nums[r] + nums[i];
                if (Math.abs(sum - target) < Math.abs(res - target)) res = sum; // update res
                if (sum == target) {
                    return target; // if sum equals target, just return because it must be the closest
                } else if (sum < target) {
                    l++;
                } else {
                    r--;
                }
            }
        }
        return res;
    }
}
