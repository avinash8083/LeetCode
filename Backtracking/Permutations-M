//https://leetcode.com/problems/permutations/
//https://leetcode.com/problems/permutations-ii/  //sililar problem

class Solution {
     List<List<Integer>> list;
    public List<List<Integer>> permute(int[] nums) {
       list = new ArrayList();
        traverse(nums, 0, new ArrayList());
        return list;
    }
    public void traverse(int[] nums,int index, List<Integer> cList){
        if(index == nums.length){
            list.add(new ArrayList(cList));
            return;
        }
        
        for(int i=index;i<nums.length;i++){
           swap(nums, i, index);
            cList.add(nums[index]);
            traverse(nums, index+1, cList);
            cList.remove(cList.size()-1);
           swap(nums,i,index);
        }
    }
    
    public void swap(int[] nums, int st, int end){
        int temp = nums[st];
        nums[st] = nums[end];
        nums[end] = temp;
    }
}
