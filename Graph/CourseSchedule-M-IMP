//https://leetcode.com/problems/course-schedule/
//https://leetcode.com/problems/course-schedule/discuss/658351/Java-DFS-Concise-O(V-%2B-E)
// if any child visiting parent again there is a cycle 

class Solution {
     List<List<Integer>> list=null;
     int visited[];
    public boolean canFinish(int numCourses, int[][] p) {
          visited=new int[numCourses]; 
           list=new ArrayList<>(numCourses);
         for(int i=0;i<numCourses;i++)
           list.add(new ArrayList<>());
        
           for(int j=0;j<p.length;j++){
               list.get(p[j][1]).add(p[j][0]);
           }
         // System.out.println(list.get(0));
   for (int i = 0; i < numCourses; i++) if (hasCycle(i)) return false; 
        return true;
    }
    boolean hasCycle(int u){
         if (visited[u] == 2) return false;
          if (visited[u] == 1) return true; 
         visited[u] = 1;
        for (int v : list.get(u))  {
             if (hasCycle(v)) return true;   
        }
        visited[u] = 2; 
        return false;
    }
}
