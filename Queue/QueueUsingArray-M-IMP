//https://leetcode.com/problems/design-circular-queue/

class MyCircularQueue {
   
  int a[] ;
  int front;
  int rear;
  int size;

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
      this.size=k;
      a=new int[k];
      this.front=-1;
      this.rear=-1;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
      if((front==0 && rear==size-1) || front-1==rear)
          return false;
      else if(front == -1) 
           { 
        front = 0; 
        rear = 0; 
        a[front]= value;
           } 
      else if(rear==size-1 && front != 0){
            rear=0;
            a[rear]=value;
         }
      else{
        rear++;
        a[rear]=value;
         }
      return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
      if(front==-1)
          return false;
      else if(rear==front){
        a[rear]=0;
        rear=-1;
        front=-1;
        }
      else if(front==size-1){
         front=0;
         a[front]=0;
        }
      else{
        a[front++]=0;
      }
      return true;
    }
    
    /** Get the front item from the queue. */
    public int Front() {
      if(front==-1 || rear==-1)
        return -1;
        return a[front];
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
       if(front==-1 || rear==-1)
        return -1;
        return a[rear];
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        if(front==-1)
          return true;
      return false;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        if((front==0 && rear==size-1) || front-1==rear)
          return true;
      return false;
    }
}
