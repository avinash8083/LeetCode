//https://leetcode.com/problems/01-matrix/
//..........................naive approch ,check all element in matrix....................................................

class Solution {
    public int[][] updateMatrix(int[][] m) {
        int r=m.length;
        int c=m[0].length;
        int res[][]=new int [r][c];
       for(int i=0;i<r;i++){
              for(int j=0;j<c;j++){
                  if(m[i][j]!=0)
                  res[i][j]=calculate(i,j,m);
              } 
       }
     return res;
    }
    
    int calculate(int x,int y,int[][] m){
       int r=m.length;
       int c=m[0].length;
       int count=Integer.MAX_VALUE;
              for(int i=0;i<r;i++){
              for(int j=0;j<c;j++){
                  if(m[i][j]==0)
               count=Math.min(count,Math.abs(x-i)+Math.abs(y-j));
              } 
       } 
        return count;
      }   
}
//...............................better approch.................................................................

class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        int index=1;   
        boolean changed = true;
        while(changed) {
           changed = false;
           for (int i=0; i<matrix.length; i++) {
               for (int j=0; j<matrix[i].length; j++) {
                    if (matrix[i][j] == index) {
                        int min = Integer.MAX_VALUE;
                        if (i > 0 && matrix[i-1][j] < min) {
                            min = matrix[i-1][j];
                        }
                        
                        if (i+1 < matrix.length && matrix[i+1][j] < min) {
                            min = matrix[i+1][j];
                        }
                        
                        if (j > 0 && matrix[i][j-1] < min) {
                            min = matrix[i][j-1];
                        }
                        
                        if (j + 1 < matrix[0].length && matrix[i][j+1] < min) {
                            min = matrix[i][j+1];
                        }
                        
                        if (min != matrix[i][j] - 1) {
                            matrix[i][j] = matrix[i][j] + 1;
                            changed = true;
                        }
                    }
               }    
           }     
            
           index++;
        }  
        return matrix;
    }
}
