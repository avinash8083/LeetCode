//https://leetcode.com/problems/sort-the-matrix-diagonally/
//.....................................not good approch............................
class Solution {
    public int[][] diagonalSort(int[][] mat) {
        int m=mat.length,n=mat[0].length;
        for(int i=m-1;i>=0;i--)
            sort(mat,i,0);
         for(int j=1;j<n;j++)
            sort(mat,0,j);
        return mat;
    }
   void  sort(int[][] mat,int x,int y){
      int m=mat.length,n=mat[0].length;
        List<Integer> list = new ArrayList<>();
        for(int i=x,j=y;i<m && j<n;i++,j++){
            list.add(mat[i][j]);
        }
        Collections.sort(list);
          for(int i=x,j=y,k=0;i<m && j<n;i++,j++,k++){
           mat[i][j]=list.get(k);
        }
    }
}
//...........................better approch ,use array instead of list ,no need to sort ..........................

class Solution {
    public int[][] diagonalSort(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        for(int i = 0; i < n; i++) {
            helper(mat, m - 1, i);
        }
        for(int i = 0; i < m - 1; i++) {
            helper(mat, i, n - 1);
        }
        return mat;
    }
    
    private void helper(int[][] mat, int xStart, int yStart) {
        int[] bucket = new int[101];
        for(int x = xStart, y = yStart; x >= 0 && y >= 0; x--, y--) {
            int val = mat[x][y];
            bucket[val]++;
        }
        int val = 100;
        for(int x = xStart, y = yStart; x >= 0 && y >= 0; x--, y--) {
            while(bucket[val] <= 0) {
                val--;
            }
            mat[x][y] = val;
            bucket[val]--;
        }
    }
}
