//https://leetcode.com/problems/surrounded-regions/
//Find all regions on the border and mark as visited
//Find all regions 'O' not visited and change them to 'X'

class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) 
            return;
        int m=board.length;
        int n=board[0].length;
        boolean visited[][]=new boolean[m][n];
        
           for(int i=0;i<m;i++){
           dfs(visited,0,i,board);
           dfs(visited,i,0,board);
           dfs(visited,m-1,i,board);  
           dfs(visited,i,n-1,board);  
           }
        
        
        for(int i=1;i<m-1;i++){
            for(int j=1;j<n-1;j++){
                if(!visited[i][j] && board[i][j]=='O')board[i][j]='X';
            }
        }
    }
    void dfs(boolean[][] visited,int i,int j, char[][] board){
       int m=board.length;
        int n=board[0].length;
            if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || board[i][j] == 'X') 
            return;
        int x[]={-1,0,1,0};
        int y[]={0,-1,0,1};
         visited[i][j]=true;
        for(int k=0;k<x.length;k++){    
        dfs(visited,i+x[k],j+y[k],board);
        }
    }
}
