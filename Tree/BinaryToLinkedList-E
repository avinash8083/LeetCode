//https://leetcode.com/problems/flatten-binary-tree-to-linked-list/
//using list easy but dont use any extra data structure then it is difficult 

class Solution {
  List<Integer> list;
    public void flatten(TreeNode root) {
        list=new ArrayList<Integer>();
        preorder(root);
        formTree(root);
    }
  
  void preorder(TreeNode root){
     if(root==null)
       return;
         list.add(root.val);
         preorder(root.left);
         preorder(root.right);
    }
    void formTree(TreeNode node){   
      for(int i=1;i<list.size();i++){
           TreeNode   newNode=new TreeNode(list.get(i));
              node.left=null;
              node.right=newNode;
              node=node.right;
             }
    }
  
}
//##########################################################################################

class Solution {
    public void flatten(TreeNode root) {
        if(root == null)
            return;
		
		// lets reach the leaf node first.
        flatten(root.left);
        flatten(root.right);
        
		// Storing this so that it can be attached at to the end
        TreeNode right = root.right;
		// will use this to iterate next (right in this case)
        TreeNode curr = root; 
        
		// move what is left of the node to the right and remove left
        root.right = root.left;
        root.left = null;
        
		// keep going right till leaf node and attach right (stored) at the end.
        while(curr.right != null) 
			curr = curr.right;
        curr.right = right;
    }
}
