//https://leetcode.com/problems/decode-string/


class Solution {
    /* The idea is to recursively decode substrings */
	public String decodeString(String s) {
		return decodeHelper(s, 0);
	}

	private String decodeHelper(final String s, int k) {
		/*
		 * base case - if the string contains no [ ] then we can just return it
		 * multiplied by k
		 */
		if ( ! s.contains("[")) {
			return repeat(s, k);
		}

		final StringBuilder sb = new StringBuilder();

		int index = 0;
		while (index < s.length()) {

			char ch = s.charAt(index);

			if (Character.isDigit(ch)) {

				int num = 0;
				/* K can be greater than 1 digit so we need to get all the digits */
				while (Character.isDigit(ch)) {
					index++;
					num = num * 10 + ch - '0';
					ch = s.charAt(index);
				}

				/*
				 * get the substring between brackets starting at one index after the last digit
				 */
				final String substringBetween = substringBetween(s, index);
				final String decoded = decodeHelper(substringBetween, num);

				/*
				 * move the index after the last bracket of this substring here +2 is for the
				 * two brackets -> [ ]
				 */
				index += substringBetween.length() + 2;
				sb.append(decoded);

			} else {
				sb.append(ch);
				index++;
			}

		}

		/*
		 * return the string repeated by k times this also takes care of decoding the
		 * string in recursive calls
		 */
		return repeat(sb.toString(), k);
	}

	/* repeat the string k times */
	private String repeat(final String s, int k) {
		if (k == 0)
			return s;

		final StringBuilder sb = new StringBuilder();

		while (k-- > 0) {
			sb.append(s);
		}

		return sb.toString();
	}

	/* extract the substring between [ ] */
	private String substringBetween(final String s, int start) {

		int index = start;
		int open = 0;
		int close = 0;
		boolean balanced = false;

		/* search for the inner substring */
		while ( ! balanced) {

			final char ch = s.charAt(index++);

			if (ch == '[')
				open++;
			else if (ch == ']')
				close++;

			if (open == close)
				balanced = true;
		}

		/* return only the inner substring without the [ ] */
		/*
		 * index - 1 here because in the loop we will go beyond the last closing bracket
		 * so we need to move back one char
		 */
		return s.substring(start + 1, index - 1);
	}

}
